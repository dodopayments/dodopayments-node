// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'dodopayments-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import DodoPayments from 'dodopayments';

export const metadata: Metadata = {
  resource: 'your_webhook_url',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/your-webhook-url',
  operationId: 'dummy_handler_for_outgoing_webhook_docs',
};

export const tool: Tool = {
  name: 'create_your_webhook_url',
  description: '',
  inputSchema: {
    type: 'object',
    properties: {
      business_id: {
        type: 'string',
      },
      data: {
        anyOf: [
          {
            allOf: [
              {
                $ref: '#/$defs/payment',
              },
            ],
            title: 'Payment',
          },
          {
            allOf: [
              {
                $ref: '#/$defs/subscription',
              },
            ],
            title: 'Subscription',
            description: 'Response struct representing subscription details',
          },
          {
            allOf: [
              {
                $ref: '#/$defs/refund',
              },
            ],
            title: 'Refund',
          },
          {
            allOf: [
              {
                $ref: '#/$defs/get_dispute',
              },
            ],
            title: 'Dispute',
          },
          {
            allOf: [
              {
                $ref: '#/$defs/license_key',
              },
            ],
            title: 'License Key',
          },
        ],
        description: 'The latest data at the time of delivery attempt',
      },
      timestamp: {
        type: 'string',
        description:
          'The timestamp of when the event occurred (not necessarily the same of when it was delivered)',
        format: 'date-time',
      },
      type: {
        $ref: '#/$defs/webhook_event_type',
      },
      'webhook-id': {
        type: 'string',
      },
      'webhook-signature': {
        type: 'string',
      },
      'webhook-timestamp': {
        type: 'string',
      },
    },
    required: [
      'business_id',
      'data',
      'timestamp',
      'type',
      'webhook-id',
      'webhook-signature',
      'webhook-timestamp',
    ],
    $defs: {
      payment: {
        type: 'object',
        properties: {
          billing: {
            $ref: '#/$defs/billing_address',
          },
          brand_id: {
            type: 'string',
            description: 'brand id this payment belongs to',
          },
          business_id: {
            type: 'string',
            description: 'Identifier of the business associated with the payment',
          },
          created_at: {
            type: 'string',
            description: 'Timestamp when the payment was created',
            format: 'date-time',
          },
          currency: {
            $ref: '#/$defs/currency',
          },
          customer: {
            $ref: '#/$defs/customer_limited_details',
          },
          digital_products_delivered: {
            type: 'boolean',
            description: 'brand id this payment belongs to',
          },
          disputes: {
            type: 'array',
            description: 'List of disputes associated with this payment',
            items: {
              $ref: '#/$defs/dispute',
            },
          },
          metadata: {
            type: 'object',
            description: 'Additional custom data associated with the payment',
          },
          payment_id: {
            type: 'string',
            description: 'Unique identifier for the payment',
          },
          refunds: {
            type: 'array',
            description: 'List of refunds issued for this payment',
            items: {
              $ref: '#/$defs/refund',
            },
          },
          settlement_amount: {
            type: 'integer',
            description:
              "The amount that will be credited to your Dodo balance after currency conversion and processing.\nEspecially relevant for adaptive pricing where the customer's payment currency differs from your settlement currency.",
          },
          settlement_currency: {
            $ref: '#/$defs/currency',
          },
          total_amount: {
            type: 'integer',
            description:
              'Total amount charged to the customer including tax, in smallest currency unit (e.g. cents)',
          },
          card_issuing_country: {
            $ref: '#/$defs/country_code',
          },
          card_last_four: {
            type: 'string',
            description: 'The last four digits of the card',
          },
          card_network: {
            type: 'string',
            description: 'Card network like VISA, MASTERCARD etc.',
          },
          card_type: {
            type: 'string',
            description: 'The type of card DEBIT or CREDIT',
          },
          discount_id: {
            type: 'string',
            description: 'The discount id if discount is applied',
          },
          error_code: {
            type: 'string',
            description: 'An error code if the payment failed',
          },
          error_message: {
            type: 'string',
            description: 'An error message if the payment failed',
          },
          payment_link: {
            type: 'string',
            description: 'Checkout URL',
          },
          payment_method: {
            type: 'string',
            description: 'Payment method used by customer (e.g. "card", "bank_transfer")',
          },
          payment_method_type: {
            type: 'string',
            description: 'Specific type of payment method (e.g. "visa", "mastercard")',
          },
          product_cart: {
            type: 'array',
            description: 'List of products purchased in a one-time payment',
            items: {
              type: 'object',
              properties: {
                product_id: {
                  type: 'string',
                },
                quantity: {
                  type: 'integer',
                },
              },
              required: ['product_id', 'quantity'],
            },
          },
          settlement_tax: {
            type: 'integer',
            description:
              'This represents the portion of settlement_amount that corresponds to taxes collected.\nEspecially relevant for adaptive pricing where the tax component must be tracked separately\nin your Dodo balance.',
          },
          status: {
            $ref: '#/$defs/intent_status',
          },
          subscription_id: {
            type: 'string',
            description: 'Identifier of the subscription if payment is part of a subscription',
          },
          tax: {
            type: 'integer',
            description: 'Amount of tax collected in smallest currency unit (e.g. cents)',
          },
          updated_at: {
            type: 'string',
            description: 'Timestamp when the payment was last updated',
            format: 'date-time',
          },
        },
        required: [
          'billing',
          'brand_id',
          'business_id',
          'created_at',
          'currency',
          'customer',
          'digital_products_delivered',
          'disputes',
          'metadata',
          'payment_id',
          'refunds',
          'settlement_amount',
          'settlement_currency',
          'total_amount',
        ],
      },
      billing_address: {
        type: 'object',
        properties: {
          city: {
            type: 'string',
            description: 'City name',
          },
          country: {
            $ref: '#/$defs/country_code',
          },
          state: {
            type: 'string',
            description: 'State or province name',
          },
          street: {
            type: 'string',
            description: 'Street address including house number and unit/apartment if applicable',
          },
          zipcode: {
            type: 'string',
            description: 'Postal code or ZIP code',
          },
        },
        required: ['city', 'country', 'state', 'street', 'zipcode'],
      },
      country_code: {
        type: 'string',
        description: 'ISO country code alpha2 variant',
        enum: [
          'AF',
          'AX',
          'AL',
          'DZ',
          'AS',
          'AD',
          'AO',
          'AI',
          'AQ',
          'AG',
          'AR',
          'AM',
          'AW',
          'AU',
          'AT',
          'AZ',
          'BS',
          'BH',
          'BD',
          'BB',
          'BY',
          'BE',
          'BZ',
          'BJ',
          'BM',
          'BT',
          'BO',
          'BQ',
          'BA',
          'BW',
          'BV',
          'BR',
          'IO',
          'BN',
          'BG',
          'BF',
          'BI',
          'KH',
          'CM',
          'CA',
          'CV',
          'KY',
          'CF',
          'TD',
          'CL',
          'CN',
          'CX',
          'CC',
          'CO',
          'KM',
          'CG',
          'CD',
          'CK',
          'CR',
          'CI',
          'HR',
          'CU',
          'CW',
          'CY',
          'CZ',
          'DK',
          'DJ',
          'DM',
          'DO',
          'EC',
          'EG',
          'SV',
          'GQ',
          'ER',
          'EE',
          'ET',
          'FK',
          'FO',
          'FJ',
          'FI',
          'FR',
          'GF',
          'PF',
          'TF',
          'GA',
          'GM',
          'GE',
          'DE',
          'GH',
          'GI',
          'GR',
          'GL',
          'GD',
          'GP',
          'GU',
          'GT',
          'GG',
          'GN',
          'GW',
          'GY',
          'HT',
          'HM',
          'VA',
          'HN',
          'HK',
          'HU',
          'IS',
          'IN',
          'ID',
          'IR',
          'IQ',
          'IE',
          'IM',
          'IL',
          'IT',
          'JM',
          'JP',
          'JE',
          'JO',
          'KZ',
          'KE',
          'KI',
          'KP',
          'KR',
          'KW',
          'KG',
          'LA',
          'LV',
          'LB',
          'LS',
          'LR',
          'LY',
          'LI',
          'LT',
          'LU',
          'MO',
          'MK',
          'MG',
          'MW',
          'MY',
          'MV',
          'ML',
          'MT',
          'MH',
          'MQ',
          'MR',
          'MU',
          'YT',
          'MX',
          'FM',
          'MD',
          'MC',
          'MN',
          'ME',
          'MS',
          'MA',
          'MZ',
          'MM',
          'NA',
          'NR',
          'NP',
          'NL',
          'NC',
          'NZ',
          'NI',
          'NE',
          'NG',
          'NU',
          'NF',
          'MP',
          'NO',
          'OM',
          'PK',
          'PW',
          'PS',
          'PA',
          'PG',
          'PY',
          'PE',
          'PH',
          'PN',
          'PL',
          'PT',
          'PR',
          'QA',
          'RE',
          'RO',
          'RU',
          'RW',
          'BL',
          'SH',
          'KN',
          'LC',
          'MF',
          'PM',
          'VC',
          'WS',
          'SM',
          'ST',
          'SA',
          'SN',
          'RS',
          'SC',
          'SL',
          'SG',
          'SX',
          'SK',
          'SI',
          'SB',
          'SO',
          'ZA',
          'GS',
          'SS',
          'ES',
          'LK',
          'SD',
          'SR',
          'SJ',
          'SZ',
          'SE',
          'CH',
          'SY',
          'TW',
          'TJ',
          'TZ',
          'TH',
          'TL',
          'TG',
          'TK',
          'TO',
          'TT',
          'TN',
          'TR',
          'TM',
          'TC',
          'TV',
          'UG',
          'UA',
          'AE',
          'GB',
          'UM',
          'US',
          'UY',
          'UZ',
          'VU',
          'VE',
          'VN',
          'VG',
          'VI',
          'WF',
          'EH',
          'YE',
          'ZM',
          'ZW',
        ],
      },
      currency: {
        type: 'string',
        enum: [
          'AED',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BWP',
          'BYN',
          'BZD',
          'CAD',
          'CHF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRU',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SEK',
          'SGD',
          'SHP',
          'SLE',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STN',
          'SVC',
          'SZL',
          'THB',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
        ],
      },
      customer_limited_details: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string',
            description: 'Unique identifier for the customer',
          },
          email: {
            type: 'string',
            description: 'Email address of the customer',
          },
          name: {
            type: 'string',
            description: 'Full name of the customer',
          },
        },
        required: ['customer_id', 'email', 'name'],
      },
      dispute: {
        type: 'object',
        properties: {
          amount: {
            type: 'string',
            description:
              'The amount involved in the dispute, represented as a string to accommodate precision.',
          },
          business_id: {
            type: 'string',
            description: 'The unique identifier of the business involved in the dispute.',
          },
          created_at: {
            type: 'string',
            description: 'The timestamp of when the dispute was created, in UTC.',
            format: 'date-time',
          },
          currency: {
            type: 'string',
            description: 'The currency of the disputed amount, represented as an ISO 4217 currency code.',
          },
          dispute_id: {
            type: 'string',
            description: 'The unique identifier of the dispute.',
          },
          dispute_stage: {
            $ref: '#/$defs/dispute_stage',
          },
          dispute_status: {
            $ref: '#/$defs/dispute_status',
          },
          payment_id: {
            type: 'string',
            description: 'The unique identifier of the payment associated with the dispute.',
          },
          remarks: {
            type: 'string',
            description: 'Remarks',
          },
        },
        required: [
          'amount',
          'business_id',
          'created_at',
          'currency',
          'dispute_id',
          'dispute_stage',
          'dispute_status',
          'payment_id',
        ],
      },
      dispute_stage: {
        type: 'string',
        enum: ['pre_dispute', 'dispute', 'pre_arbitration'],
      },
      dispute_status: {
        type: 'string',
        enum: [
          'dispute_opened',
          'dispute_expired',
          'dispute_accepted',
          'dispute_cancelled',
          'dispute_challenged',
          'dispute_won',
          'dispute_lost',
        ],
      },
      refund: {
        type: 'object',
        properties: {
          business_id: {
            type: 'string',
            description: 'The unique identifier of the business issuing the refund.',
          },
          created_at: {
            type: 'string',
            description: 'The timestamp of when the refund was created in UTC.',
            format: 'date-time',
          },
          is_partial: {
            type: 'boolean',
            description: 'If true the refund is a partial refund',
          },
          payment_id: {
            type: 'string',
            description: 'The unique identifier of the payment associated with the refund.',
          },
          refund_id: {
            type: 'string',
            description: 'The unique identifier of the refund.',
          },
          status: {
            $ref: '#/$defs/refund_status',
          },
          amount: {
            type: 'integer',
            description: 'The refunded amount.',
          },
          currency: {
            $ref: '#/$defs/currency',
          },
          reason: {
            type: 'string',
            description: 'The reason provided for the refund, if any. Optional.',
          },
        },
        required: ['business_id', 'created_at', 'is_partial', 'payment_id', 'refund_id', 'status'],
      },
      refund_status: {
        type: 'string',
        enum: ['succeeded', 'failed', 'pending', 'review'],
      },
      intent_status: {
        type: 'string',
        enum: [
          'succeeded',
          'failed',
          'cancelled',
          'processing',
          'requires_customer_action',
          'requires_merchant_action',
          'requires_payment_method',
          'requires_confirmation',
          'requires_capture',
          'partially_captured',
          'partially_captured_and_capturable',
        ],
      },
      subscription: {
        type: 'object',
        description: 'Response struct representing subscription details',
        properties: {
          addons: {
            type: 'array',
            description: 'Addons associated with this subscription',
            items: {
              $ref: '#/$defs/addon_cart_response_item',
            },
          },
          billing: {
            $ref: '#/$defs/billing_address',
          },
          cancel_at_next_billing_date: {
            type: 'boolean',
            description: 'Indicates if the subscription will cancel at the next billing date',
          },
          created_at: {
            type: 'string',
            description: 'Timestamp when the subscription was created',
            format: 'date-time',
          },
          currency: {
            $ref: '#/$defs/currency',
          },
          customer: {
            $ref: '#/$defs/customer_limited_details',
          },
          metadata: {
            type: 'object',
            description: 'Additional custom data associated with the subscription',
          },
          next_billing_date: {
            type: 'string',
            description:
              'Timestamp of the next scheduled billing. Indicates the end of current billing period',
            format: 'date-time',
          },
          on_demand: {
            type: 'boolean',
            description: 'Wether the subscription is on-demand or not',
          },
          payment_frequency_count: {
            type: 'integer',
            description: 'Number of payment frequency intervals',
          },
          payment_frequency_interval: {
            $ref: '#/$defs/time_interval',
          },
          previous_billing_date: {
            type: 'string',
            description: 'Timestamp of the last payment. Indicates the start of current billing period',
            format: 'date-time',
          },
          product_id: {
            type: 'string',
            description: 'Identifier of the product associated with this subscription',
          },
          quantity: {
            type: 'integer',
            description: 'Number of units/items included in the subscription',
          },
          recurring_pre_tax_amount: {
            type: 'integer',
            description:
              'Amount charged before tax for each recurring payment in smallest currency unit (e.g. cents)',
          },
          status: {
            $ref: '#/$defs/subscription_status',
          },
          subscription_id: {
            type: 'string',
            description: 'Unique identifier for the subscription',
          },
          subscription_period_count: {
            type: 'integer',
            description: 'Number of subscription period intervals',
          },
          subscription_period_interval: {
            $ref: '#/$defs/time_interval',
          },
          tax_inclusive: {
            type: 'boolean',
            description: 'Indicates if the recurring_pre_tax_amount is tax inclusive',
          },
          trial_period_days: {
            type: 'integer',
            description: 'Number of days in the trial period (0 if no trial)',
          },
          cancelled_at: {
            type: 'string',
            description: 'Cancelled timestamp if the subscription is cancelled',
            format: 'date-time',
          },
          discount_cycles_remaining: {
            type: 'integer',
            description: 'Number of remaining discount cycles if discount is applied',
          },
          discount_id: {
            type: 'string',
            description: 'The discount id if discount is applied',
          },
        },
        required: [
          'addons',
          'billing',
          'cancel_at_next_billing_date',
          'created_at',
          'currency',
          'customer',
          'metadata',
          'next_billing_date',
          'on_demand',
          'payment_frequency_count',
          'payment_frequency_interval',
          'previous_billing_date',
          'product_id',
          'quantity',
          'recurring_pre_tax_amount',
          'status',
          'subscription_id',
          'subscription_period_count',
          'subscription_period_interval',
          'tax_inclusive',
          'trial_period_days',
        ],
      },
      addon_cart_response_item: {
        type: 'object',
        description: 'Response struct representing subscription details',
        properties: {
          addon_id: {
            type: 'string',
          },
          quantity: {
            type: 'integer',
          },
        },
        required: ['addon_id', 'quantity'],
      },
      time_interval: {
        type: 'string',
        enum: ['Day', 'Week', 'Month', 'Year'],
      },
      subscription_status: {
        type: 'string',
        enum: ['pending', 'active', 'on_hold', 'cancelled', 'failed', 'expired'],
      },
      get_dispute: {
        type: 'object',
        properties: {
          amount: {
            type: 'string',
            description:
              'The amount involved in the dispute, represented as a string to accommodate precision.',
          },
          business_id: {
            type: 'string',
            description: 'The unique identifier of the business involved in the dispute.',
          },
          created_at: {
            type: 'string',
            description: 'The timestamp of when the dispute was created, in UTC.',
            format: 'date-time',
          },
          currency: {
            type: 'string',
            description: 'The currency of the disputed amount, represented as an ISO 4217 currency code.',
          },
          customer: {
            $ref: '#/$defs/customer_limited_details',
          },
          dispute_id: {
            type: 'string',
            description: 'The unique identifier of the dispute.',
          },
          dispute_stage: {
            $ref: '#/$defs/dispute_stage',
          },
          dispute_status: {
            $ref: '#/$defs/dispute_status',
          },
          payment_id: {
            type: 'string',
            description: 'The unique identifier of the payment associated with the dispute.',
          },
          reason: {
            type: 'string',
            description: 'Reason for the dispute',
          },
          remarks: {
            type: 'string',
            description: 'Remarks',
          },
        },
        required: [
          'amount',
          'business_id',
          'created_at',
          'currency',
          'customer',
          'dispute_id',
          'dispute_stage',
          'dispute_status',
          'payment_id',
        ],
      },
      license_key: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The unique identifier of the license key.',
          },
          business_id: {
            type: 'string',
            description: 'The unique identifier of the business associated with the license key.',
          },
          created_at: {
            type: 'string',
            description: 'The timestamp indicating when the license key was created, in UTC.',
            format: 'date-time',
          },
          customer_id: {
            type: 'string',
            description: 'The unique identifier of the customer associated with the license key.',
          },
          instances_count: {
            type: 'integer',
            description: 'The current number of instances activated for this license key.',
          },
          key: {
            type: 'string',
            description: 'The license key string.',
          },
          payment_id: {
            type: 'string',
            description: 'The unique identifier of the payment associated with the license key.',
          },
          product_id: {
            type: 'string',
            description: 'The unique identifier of the product associated with the license key.',
          },
          status: {
            $ref: '#/$defs/license_key_status',
          },
          activations_limit: {
            type: 'integer',
            description: 'The maximum number of activations allowed for this license key.',
          },
          expires_at: {
            type: 'string',
            description: 'The timestamp indicating when the license key expires, in UTC.',
            format: 'date-time',
          },
          subscription_id: {
            type: 'string',
            description: 'The unique identifier of the subscription associated with the license key, if any.',
          },
        },
        required: [
          'id',
          'business_id',
          'created_at',
          'customer_id',
          'instances_count',
          'key',
          'payment_id',
          'product_id',
          'status',
        ],
      },
      license_key_status: {
        type: 'string',
        enum: ['active', 'expired', 'disabled'],
      },
      webhook_event_type: {
        type: 'string',
        description: 'Event types for Dodo events',
        enum: [
          'payment.succeeded',
          'payment.failed',
          'payment.processing',
          'payment.cancelled',
          'refund.succeeded',
          'refund.failed',
          'dispute.opened',
          'dispute.expired',
          'dispute.accepted',
          'dispute.cancelled',
          'dispute.challenged',
          'dispute.won',
          'dispute.lost',
          'subscription.active',
          'subscription.renewed',
          'subscription.on_hold',
          'subscription.cancelled',
          'subscription.failed',
          'subscription.expired',
          'subscription.plan_changed',
          'license_key.created',
        ],
      },
    },
  },
  annotations: {},
};

export const handler = async (client: DodoPayments, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.yourWebhookURL.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
